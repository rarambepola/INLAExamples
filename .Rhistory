print(fit$par)
print(fit2$par)
setwd("J:/INLAExamples")
beta0hist = rep(0, (ntotal <- 50))
beta1hist = rep(0, ntotal)
library(RandomFields)
library(TMB)
library(INLA)
#TMB stuff
compile("TMBspdeExample.cpp")
dyn.load(dynlib("TMBspdeExample"))
#choose number of points + prediction points
n=200
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,10),runif(1,0,10))
}
a <- RMmatern(0.5)
b <- RFsimulate(a, x=coord[,1], y=coord[,2])
c <- as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d <- grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1.00,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
cov <- rep(0, n)
response <- rep(0, n)
response2 <- rep(0, n)
for(i in 1:n){
cov[i] <- runif(1,0,3)
response[i] <- rnorm(1, 0.5 + 0.5*cov[i] + d$data[i], 1)
#response[i] <- rnorm(1, 4 + 2*cov[i], 1)
#response[i] <- rnorm(1, 1 + 2*cov[i] + c[i], 1)
}
mesh <- inla.mesh.2d(loc = coord, max.edge=c(1,2), cutoff=0.25)
plot(mesh)
spde <- (inla.spde2.matern(mesh=mesh, alpha=2)$param.inla)[c("M0","M1","M2")]
n_s <- nrow(spde$M0)
x <- rep(150.0, n_s)
f <- MakeADFun(
data = list(X=response, cov=cov, spde=spde),
parameters = list(beta0=0, beta1=0, sigma=1, log_kappa=0.5, x=x),
random="x",
DLL = "TMBspdeExample"
)
fit <- nlminb(f$par,f$fn,f$gr,lower=c(-10,-10,0,0))
compile("TMBExample.cpp")
dyn.load(dynlib("TMBExample"))
g <- MakeADFun(
data = list(x=response, cov=cov),
parameters = list(beta0=0, beta1=0, sigma=1),
DLL = "TMBExample"
)
fit2 <- nlminb(g$par,g$fn,g$gr,lower=c(-10,-10,0))
print(fit$par)
print(fit2$par)
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,10),runif(1,0,10))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
cov <- rep(0, n)
response <- rep(0, n)
response2 <- rep(0, n)
for(i in 1:n){
cov[i] <- runif(1,0,3)
response[i] <- rnorm(1, 4 + 2*cov[i] + d$data[i])
response2[i] <- rnorm(1, 41 + 21*cov[i] + c[i])
}
library(INLA)
mesh <- inla.mesh.2d(loc = coord, max.edge=c(35,100))
spde <- inla.spde2.matern(mesh=mesh, alpha=2)
A <- inla.spde.make.A(mesh=mesh, loc=coord)
s.index <- inla.spde.make.index(name="spatial.field", n.spde=spde$n.spde)
#add data to stack
stack.norm <- inla.stack(data=list(Response=response), A=list(A,1), effects=list(c(s.index, list(Intercept=1)),
list(Covariate=cov)), tag="all")
stack.norm2 <- inla.stack(data=list(Response=response2), A=list(A,1), effects=list(c(s.index, list(Intercept=1)),
list(Covariate=cov)), tag="all")
#define formula for model
formula <- Response ~ -1 + Intercept + Covariate + f(spatial.field, model=spde)
output.pred <- inla(formula, data=inla.stack.data(stack.norm, spde=spde), family="gaussian",
control.predictor=list(A=inla.stack.A(stack.norm), compute=TRUE),
control.compute=list(cpo=TRUE, dic=TRUE))
output.pred$summary.fixed
output.pred2 <- inla(formula, data=inla.stack.data(stack.norm2, spde=spde), family="gaussian",
control.predictor=list(A=inla.stack.A(stack.norm2), compute=TRUE),
control.compute=list(cpo=TRUE, dic=TRUE))
output.pred2$summary.fixed
#include <TMB.hpp>                                // Links in the TMB libraries
template<class Type>
Type objective_function<Type>::operator() ()
{
using namespace R_inla;
using namespace density;
using namespace Eigen;
DATA_VECTOR(X);                                     // Data vector transmitted from R
DATA_VECTOR(cov);
PARAMETER(beta0);                                  // Parameter value transmitted from R
PARAMETER(beta1);
PARAMETER(sigma);
PARAMETER(log_kappa);
PARAMETER_VECTOR(x);
DATA_STRUCT(spde,spde_t);
Type kappa = exp(log_kappa);
SparseMatrix<Type> Q = Q_spde(spde, kappa);
int n;
n = X.size();
Type f;     // Declare the "objective function" (neg. log. likelihood)
f= GMRF(Q)(x);
//printf("test\n")
//f=0;
for(int i=0; i<n; i++){
f = f -dnorm(X[i],beta0 + beta1*cov[i],sigma,true);
}
// Use R-style call to normal density
return f;
}
setwd("J:/INLAExamples")
beta0hist = rep(0, (ntotal <- 50))
beta1hist = rep(0, ntotal)
library(RandomFields)
library(TMB)
library(INLA)
#TMB stuff
compile("TMBspdeExample.cpp")
dyn.load(dynlib("TMBspdeExample"))
#choose number of points + prediction points
n=200
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,10),runif(1,0,10))
}
a <- RMmatern(0.5)
b <- RFsimulate(a, x=coord[,1], y=coord[,2])
c <- as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d <- grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1.00,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
cov <- rep(0, n)
response <- rep(0, n)
response2 <- rep(0, n)
for(i in 1:n){
cov[i] <- runif(1,0,3)
response[i] <- rnorm(1, 0.5 + 0.5*cov[i] + d$data[i], 1)
#response[i] <- rnorm(1, 4 + 2*cov[i], 1)
#response[i] <- rnorm(1, 1 + 2*cov[i] + c[i], 1)
}
mesh <- inla.mesh.2d(loc = coord, max.edge=c(1,2), cutoff=0.25)
plot(mesh)
spde <- (inla.spde2.matern(mesh=mesh, alpha=2)$param.inla)[c("M0","M1","M2")]
n_s <- nrow(spde$M0)
x <- rep(150.0, n_s)
f <- MakeADFun(
data = list(X=response, cov=cov, spde=spde),
parameters = list(beta0=0, beta1=0, sigma=1, log_kappa=0.5, x=x),
random="x",
DLL = "TMBspdeExample"
)
fit <- nlminb(f$par,f$fn,f$gr,lower=c(-10,-10,0,0))
compile("TMBExample.cpp")
dyn.load(dynlib("TMBExample"))
g <- MakeADFun(
data = list(x=response, cov=cov),
parameters = list(beta0=0, beta1=0, sigma=1),
DLL = "TMBExample"
)
fit2 <- nlminb(g$par,g$fn,g$gr,lower=c(-10,-10,0))
print(fit$par)
print(fit2$par)
x
f <- MakeADFun(
data = list(X=response, cov=cov, spde=spde),
parameters = list(beta0=0, beta1=0, sigma=1, log_kappa=0.5, x=x),
random="x",
DLL = "TMBspdeExample"
)
fit <- nlminb(f$par,f$fn,f$gr,lower=c(-10,-10,0,0))
x
fit
x
setwd("J:/INLAExamples")
beta0hist = rep(0, (ntotal <- 50))
beta1hist = rep(0, ntotal)
library(RandomFields)
library(TMB)
library(INLA)
#TMB stuff
compile("TMBspdeExample.cpp")
dyn.load(dynlib("TMBspdeExample"))
#choose number of points + prediction points
n=200
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,10),runif(1,0,10))
}
a <- RMmatern(0.5)
b <- RFsimulate(a, x=coord[,1], y=coord[,2])
c <- as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d <- grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1.00,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
cov <- rep(0, n)
response <- rep(0, n)
response2 <- rep(0, n)
for(i in 1:n){
cov[i] <- runif(1,0,3)
response[i] <- rnorm(1, 0.5 + 0.5*cov[i] + d$data[i], 1)
#response[i] <- rnorm(1, 4 + 2*cov[i], 1)
#response[i] <- rnorm(1, 1 + 2*cov[i] + c[i], 1)
}
mesh <- inla.mesh.2d(loc = coord, max.edge=c(1,2), cutoff=0.25)
plot(mesh)
spde <- (inla.spde2.matern(mesh=mesh, alpha=2)$param.inla)[c("M0","M1","M2")]
n_s <- nrow(spde$M0)
x <- rep(0.0, n_s)
f <- MakeADFun(
data = list(X=response, cov=cov, spde=spde),
parameters = list(beta0=0, beta1=0, sigma=1, log_kappa=0.5, x=x),
random="x",
DLL = "TMBspdeExample"
)
fit <- nlminb(f$par,f$fn,f$gr,lower=c(-10,-10,0,0))
compile("TMBExample.cpp")
dyn.load(dynlib("TMBExample"))
g <- MakeADFun(
data = list(x=response, cov=cov),
parameters = list(beta0=0, beta1=0, sigma=1),
DLL = "TMBExample"
)
fit2 <- nlminb(g$par,g$fn,g$gr,lower=c(-10,-10,0))
print(fit$par)
print(fit2$par)
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,10),runif(1,0,10))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
cov <- rep(0, n)
response <- rep(0, n)
response2 <- rep(0, n)
for(i in 1:n){
cov[i] <- runif(1,0,3)
response[i] <- rnorm(1, 4 + 2*cov[i] + d$data[i])
response2[i] <- rnorm(1, 41 + 21*cov[i] + c[i])
}
library(INLA)
mesh <- inla.mesh.2d(loc = coord, max.edge=c(35,100))
spde <- inla.spde2.matern(mesh=mesh, alpha=2)
A <- inla.spde.make.A(mesh=mesh, loc=coord)
s.index <- inla.spde.make.index(name="spatial.field", n.spde=spde$n.spde)
#add data to stack
stack.norm <- inla.stack(data=list(Response=response), A=list(A,1), effects=list(c(s.index, list(Intercept=1)),
list(Covariate=cov)), tag="all")
stack.norm2 <- inla.stack(data=list(Response=response2), A=list(A,1), effects=list(c(s.index, list(Intercept=1)),
list(Covariate=cov)), tag="all")
#define formula for model
formula <- Response ~ -1 + Intercept + Covariate + f(spatial.field, model=spde)
output.pred <- inla(formula, data=inla.stack.data(stack.norm, spde=spde), family="gaussian",
control.predictor=list(A=inla.stack.A(stack.norm), compute=TRUE),
control.compute=list(cpo=TRUE, dic=TRUE))
output.pred$summary.fixed
output.pred2 <- inla(formula, data=inla.stack.data(stack.norm2, spde=spde), family="gaussian",
control.predictor=list(A=inla.stack.A(stack.norm2), compute=TRUE),
control.compute=list(cpo=TRUE, dic=TRUE))
output.pred2$summary.fixed
A
x = mesh$loc[,1:2]
A*x
dim(A)
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
cov <- rep(0, n)
response <- rep(0, n)
response2 <- rep(0, n)
for(i in 1:n){
cov[i] <- runif(1,0,3)
response[i] <- rnorm(1, 4 + 2*cov[i] + d$data[i])
response2[i] <- rnorm(1, 41 + 21*cov[i] + c[i])
}
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
library(RandomFields)
#choose number of points + prediction points
n=1000
pred.n = 100
#generate coordinates for points
coord <- array(0,c(n,2))
for(i in 1:n){
coord[i,] <- c(runif(1,0,1),runif(1,0,1))
}
a = RMmatern(0.5)
b = RFsimulate(a, x=coord[,1], y=coord[,2])
c = as.matrix(b)
plot(coord, cex = c, main = "Matern RF (Random Fields)")
library(geoR)
d = grf(n, grid = coord, xlims = c(0, 10), ylims = c(0, 10), nsim = 1, cov.model = "matern",
cov.pars = c(1,1),
kappa = 0.5, nugget = 0, lambda = 1,
mean = 0, RF=TRUE)
plot(coord, cex=d$data, main = "Matern RF (geoR)")
